import json
from aiogram import types, Bot, exceptions
from aiogram import Router
from aiogram.exceptions import TelegramForbiddenError
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram import F
from app import keyboard
from app.keyboard import HELP_DICT, DOCS, SPECIALTIES
from data.crud import get_all_users
from data.database import async_session_factory
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from data.models import User
from data.database import get_db
from data import crud
from aiogram.types import CallbackQuery
from data.text import TRIGGER_RESPONSES
from config import settings

router = Router()

@router.message(Command("start"))
async def start_handler(msg: Message):
    async for session in get_db():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        result = await session.execute(select(User).where(User.telegram_id == msg.from_user.id))
        user = result.scalars().first()

        if user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –µ–≥–æ
            await msg.answer(
                f"–ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞, {msg.from_user.full_name}! üëã",
                reply_markup=keyboard.get_main_keyboard()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å
            await msg.answer(
                f"–ü—Ä–∏–≤–µ—Ç, {msg.from_user.full_name}! üëã\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
                reply_markup=keyboard.get_role_keyboard()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
            )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
@router.callback_query(lambda c: c.data.startswith("role."))
async def handle_role_selection(callback: CallbackQuery):
    role = callback.data.split("role.")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–æ–ª—å –∏–∑ callback_data

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é
    async for session in get_db():
        await crud.add_user(
            user_id=callback.from_user.id,
            username=callback.from_user.username,
            role=role,
            session=session,
        )

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.message.answer(
        f"–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ —Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {role.capitalize()} ‚úÖ",
        reply_markup=keyboard.get_main_keyboard()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–æ–ª–∏
    )
    await callback.answer()

def load_blocked_users() -> dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        with open(settings.BLOCKED_USERS_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    except FileNotFoundError:
        return {}


def save_blocked_users(blocked_users: dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª."""
    with open(settings.BLOCKED_USERS_FILE, "w", encoding="utf-8") as file:
        json.dump(blocked_users, file, indent=4, ensure_ascii=False)


# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
blocked_users = load_blocked_users()


@router.message(Command("block"))
async def block_user(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    admin_ids = [1741279318]  # –£–∫–∞–∂–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if message.from_user.id not in admin_ids:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /block <id –∏–ª–∏ username>")
        return

    target = args[1]
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, ID –∏–ª–∏ username —É–∫–∞–∑–∞–Ω
    if target.isdigit():
        blocked_users[target] = True
    else:
        blocked_users[target] = True

    save_blocked_users(blocked_users)
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{target}` –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")


@router.message(Command("unblock"))
async def unblock_user(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    admin_ids = [1741279318]
    if message.from_user.id not in admin_ids:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unblock <id –∏–ª–∏ username>")
        return

    target = args[1]
    if target in blocked_users:
        del blocked_users[target]
        save_blocked_users(blocked_users)
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{target}` –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    else:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{target}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")


@router.message(Command("sendmessage_all"))
async def send_message_to_all_users(message: types.Message, bot: Bot):
    async for session in get_db():
        if message.from_user.id != 1741279318:
            await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return

        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sendmessage_all <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
            return

        broadcast_message = args[1]

        try:
            users = await get_all_users(session)
            failed_users = []
            for user in users:
                try:
                    await bot.send_message(chat_id=user.telegram_id, text=broadcast_message, parse_mode="HTML")
                except TelegramForbiddenError:
                    print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}. –û—à–∏–±–∫–∞: {e}")
                    failed_users.append(user.telegram_id)

            await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
            if failed_users:
                await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {len(failed_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@router.message(Command("sendmessage"))
async def send_message_to_user(message: Message, bot: Bot):
    user_id = message.from_user.id
    username_sender = message.from_user.username or str(user_id)

    if user_id != 1741279318:

        await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sendmessage @username —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ /sendmessage user_id —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return

    identifier = args[1]
    message_text = args[2]

    async for session in get_db():
        try:
            if identifier.startswith("@"):
                username = identifier.lstrip("@")
                query = select(User.telegram_id).where(User.username == username)
            else:
                query = select(User.telegram_id).where(User.telegram_id == int(identifier))

            result = await session.execute(query)
            target_user = result.scalar()

            if target_user:
                await bot.send_message(chat_id=target_user, text=message_text, parse_mode="HTML")
                await message.reply(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {identifier}.")

                if user_id != 1741279318:
                    notification_text = (
                        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{username_sender} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {identifier}:\n{message_text}"
                    )
                    await bot.send_message(chat_id=1741279318, text=notification_text, parse_mode="HTML")
            else:
                await message.reply(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {identifier}.")

        except Exception as ex:
            await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {ex}")


@router.message(F.text == "–ú–µ–Ω—é")
@router.message(F.text == "–º–µ–Ω—é")
@router.message(F.text == "–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é")
@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def menu(msg: Message):
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=keyboard.get_main_keyboard())

@router.message(F.text == "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def info(msg: Message):
    await msg.answer(
         "üîî <b>–°–µ—Å—Å–∏—è –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è!</b>\n\n"
        "üë±‚Äç‚ôÇÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n\n"
        "üíª –ú—ã –∑–Ω–∞–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è ‚Äî —ç—Ç–æ —Å–ª–æ–∂–Ω–æ, –≤–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏ –ø–æ—Ä–æ–π –¥–∞–∂–µ —Å—Ç—Ä–∞—à–Ω–æ. –ù–æ –∏–º–µ–Ω–Ω–æ –≤ —Ç–∞–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã –Ω—É–∂–Ω–æ –ø—Ä–æ—è–≤–∏—Ç—å —É–ø–æ—Ä—Å—Ç–≤–æ –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å –≤—ã—Å–æ–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ö–∞–∂–¥—ã–π —ç–∫–∑–∞–º–µ–Ω –∏ –∑–∞—á–µ—Ç ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞—Ç—å, –Ω–∞ —á—Ç–æ –≤—ã —Å–ø–æ—Å–æ–±–Ω—ã!\n\n"
        "üóì <b>–î–∞—Ç—ã —ç–∫–∑–∞–º–µ–Ω–æ–≤ –∏ –∑–∞—á–µ—Ç–æ–≤</b> –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ:\n"
        "üëâ <a href='https://mrk-bsuir.by/ru/explore/search/936/'>mrk-bsuir.by</a>\n\n"
        "üëÅ –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –æ–¥–Ω–∏! –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É –ø—Å–∏—Ö–æ–ª–æ–≥—É.\n\n"
        "üçÄ –ö–∞–∂–¥—ã–π –∏–∑ –≤–∞—Å —Å–ø–æ—Å–æ–±–µ–Ω –Ω–∞ –±–æ–ª—å—à–µ–µ, —á–µ–º –¥—É–º–∞–µ—Ç! –ñ–µ–ª–∞–µ–º —É—Å–ø–µ—à–Ω–æ–π –∏ –ª–µ–≥–∫–æ–π —Å–µ—Å—Å–∏–∏! üåü\n\n"
        "üîî <b>For English version:</b> üëâ <a href='https://telegra.ph/The-interim-exams-period-is-coming-12-16'>Press here</a>",
        parse_mode="HTML",
        reply_markup=keyboard.return_keyboard()
    )


@router.message(F.text == "üåê –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º")
async def prospects(msg: Message):
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=keyboard.get_prospects_keyboard())


@router.message(F.text == "üë©üèª‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç–∞–º")
async def students(msg: Message):
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=keyboard.get_students_keyboard())

@router.message(F.text == "üÜò –í –ø–æ–º–æ—â—å —É—á–∞—â–∏–º—Å—è")
async def help_student(msg: Message):
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=keyboard.get_help_students_keyboard())

@router.callback_query(F.data.in_(HELP_DICT.keys()))
async def handle_callback(callback: CallbackQuery):
    response_text = HELP_DICT[callback.data]
    await callback.message.answer(response_text)
    await callback.answer()


@router.message(F.text == "üì≤ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
async def tech_support(msg: Message):
    await msg.answer(
        "–ù–∞—à –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è, —á—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–±–æ—è–º –≤ –µ–≥–æ —Ä–∞–±–æ—Ç–µ. "
        '–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å <a href="https://t.me/lost_wandering">–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</a> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏.',
        parse_mode="HTML",
        reply_markup=keyboard.get_main_keyboard()
    )


@router.message(F.text == "‚ùî –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã")
async def general_questions(msg: Message):
    await msg.answer('–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.', reply_markup=keyboard.get_prospects_keyboard())


@router.message(F.text == "üéØ –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ")
async def entrance(msg: Message):
    await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:', reply_markup=keyboard.get_entrance_keyboard())


@router.message(F.text == "üßëüèª‚Äçüíª –û–±—É—á–µ–Ω–∏–µ")
async def training(msg: Message):
    await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:', reply_markup=keyboard.get_training_keyboard())


@router.message(F.text == "üìå –ü—Ä–æ—Ö–æ–¥–Ω—ã–µ –±–∞–ª–ª—ã")
async def passing_scores(msg: Message):
    await msg.answer('–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ö–æ–¥–Ω—ã–µ –±–∞–ª–ª—ã –ø—Ä–æ—à–ª—ã—Ö –ª–µ—Ç –∏ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ 2025', reply_markup=keyboard.get_entrance_keyboard())


@router.message(F.text == "üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã")
async def passing_scores(msg: Message):
    await msg.answer('–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤:', reply_markup=keyboard.get_docs_keyboard())


@router.message(F.text == "üß©‚Äç –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")
async def specialties(msg: Message):
    await msg.answer('–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:', reply_markup=keyboard.get_specialties_keyboard())


@router.callback_query(F.data.startswith("doc_"))
async def handle_docs_callback(callback: CallbackQuery):
    button_text = callback.data[len("doc_"):]
    document_text = DOCS.get(button_text, "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {document_text}")
    await callback.answer()


@router.callback_query(F.data.startswith("spec_"))
async def handle_specialties_callback(callback: CallbackQuery):
    button_text = callback.data[len("spec_"):]
    specialty_text = SPECIALTIES.get(button_text, "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    await callback.message.answer(f"{specialty_text}")
    await callback.answer()


@router.message(F.text == "üìã –ó–∞—á–∏—Å–ª–µ–Ω–∏–µ")
async def enrollment(msg: Message):
    await msg.answer('–¢–µ–∫—Å—Ç –∑–∞—á–∏—Å–ª–µ–Ω–∏—è:', reply_markup=keyboard.get_prospects_keyboard())


@router.message(F.text == "üôà –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏")
async def students(msg: Message):
    await msg.answer(
        "–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ ‚Äî —ç—Ç–æ –≤–∞–∂–Ω—ã–π —ç—Ç–∞–ø –≤ —É—á–µ–±–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ. –í–æ—Ç —á—Ç–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å:\n\n"
        "1Ô∏è‚É£ **–°—Ä–æ–∫–∏ —Å–¥–∞—á–∏:** –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—Ç–æ—á–Ω–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –≤ –¥–µ–∫–∞–Ω–∞—Ç–µ –∏–ª–∏ –≤ —Å–≤–æ–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.\n\n"
        "2Ô∏è‚É£ **–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –∏ –∑–∞—á–µ—Ç—ã:** –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å–¥–∞–Ω—ã –ª–∏ –≤—Å–µ –∑–∞—á–µ—Ç—ã –∏ —ç–∫–∑–∞–º–µ–Ω—ã. –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –∏–ª–∏ –∫—É—Ä–∞—Ç–æ—Ä—É –≥—Ä—É–ø–ø—ã.\n\n"
        "3Ô∏è‚É£ **–ü–µ—Ä–µ—Å–¥–∞—á–∏:** –í —Å–ª—É—á–∞–µ –Ω–µ—Å–¥–∞–Ω–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω —É—Ç–æ—á–Ω–∏—Ç–µ —Å—Ä–æ–∫–∏ –ø–µ—Ä–µ—Å–¥–∞—á. –û–Ω–∏ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –ø–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º.\n\n"
        "‚ùó –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ: –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–∞ –≤ —Å—Ä–æ–∫, —ç—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∏–ø–µ–Ω–¥–∏–∏ –∏–ª–∏ –¥–æ–ø—É—Å–∫ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–µ–º–µ—Å—Ç—Ä—É.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —É—á–µ–±–Ω—É—é —á–∞—Å—Ç—å –∏–ª–∏ –∫ —Å–≤–æ–µ–º—É –∫—É—Ä–∞—Ç–æ—Ä—É.",
        reply_markup=keyboard.get_training_keyboard()
    )


@router.message(F.text == "üìñ –û–ø–ª–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è")
async def students(msg: Message):
    await msg.answer(
        "–û–ø–ª–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è ‚Äî —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π –æ—Å–Ω–æ–≤–µ. –í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:\n\n"
        "1Ô∏è‚É£ **–°—Ä–æ–∫–∏ –æ–ø–ª–∞—Ç—ã:** –û–ø–ª–∞—Ç–∞ –∑–∞ —Å–µ–º–µ—Å—Ç—Ä –∏–ª–∏ –≥–æ–¥ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–Ω–µ—Å–µ–Ω–∞ –¥–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –¥–∞—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–µ–π —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è.\n\n"
        "2Ô∏è‚É£ **–†–µ–∫–≤–∏–∑–∏—Ç—ã:** –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ –¥–æ–≥–æ–≤–æ—Ä–µ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "3Ô∏è‚É£ **–ß–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞:** –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —É—á–µ–±–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã —á–∞—Å—Ç—è–º–∏. –£—Ç–æ—á–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –≤ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏.\n\n"
        "4Ô∏è‚É£ **–õ—å–≥–æ—Ç—ã:** –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–æ –Ω–∞ –ª—å–≥–æ—Ç—ã –∏–ª–∏ –≤—ã –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ —Ä–∞—Å—Å—Ä–æ—á–∫—É, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –¥–µ–∫–∞–Ω–∞—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.\n\n"
        "‚ùó **–í–∞–∂–Ω–æ:** –ü—Ä–∏ –∑–∞–¥–µ—Ä–∂–∫–µ –æ–ø–ª–∞—Ç—ã –≤–æ–∑–º–æ–∂–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ç—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç –∑–∞–Ω—è—Ç–∏–π –∏–ª–∏ –Ω–µ–¥–æ–ø—É—Å–∫ –∫ —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.",
        reply_markup=keyboard.get_training_keyboard()
    )


@router.message(F.text == "üîç –°—Ç–∏–ø–µ–Ω–¥–∏–∏")
async def students(msg: Message):
    await msg.answer(
        "–°—Ç–∏–ø–µ–Ω–¥–∏—è ‚Äî —ç—Ç–æ –¥–µ–Ω–µ–∂–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º–∞—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å–Ω–æ–π –æ—Å–Ω–æ–≤–µ –∏–ª–∏ –∑–∞ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. –í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–∏–ø–µ–Ω–¥–∏–π:\n\n"
        "1Ô∏è‚É£ **–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è:** –í—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º, —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º —Å–µ—Å—Å–∏—é –±–µ–∑ —Ç—Ä–æ–µ–∫. –†–∞–∑–º–µ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è.\n\n"
        "2Ô∏è‚É£ **–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è:** –î–æ—Å—Ç—É–ø–Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞–º –∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∏—Ä–æ—Ç–∞–º –∏–ª–∏ –º–Ω–æ–≥–æ–¥–µ—Ç–Ω—ã–º). –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –æ—Ç–¥–µ–ª —Å—Ç–∏–ø–µ–Ω–¥–∏–π —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏.\n\n"
        "3Ô∏è‚É£ **–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è:** –ó–∞ –æ—Å–æ–±—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ —É—á–µ–±–µ, –Ω–∞—É–∫–µ, —Å–ø–æ—Ä—Ç–µ –∏–ª–∏ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –¢—Ä–µ–±—É–µ—Ç –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.\n\n"
        "4Ô∏è‚É£ **–ì—Ä–∞–Ω—Ç—ã –∏ –≤–Ω–µ—à–Ω–∏–µ —Å—Ç–∏–ø–µ–Ω–¥–∏–∏:** –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π.\n\n"
        "‚ùó **–°–æ–≤–µ—Ç:** –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∏–ø–µ–Ω–¥–∏–∏ –≤–∞–∂–Ω–æ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å–¥–∞–≤–∞—Ç—å —Å–µ—Å—Å–∏—é –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å—é.",
        reply_markup=keyboard.get_training_keyboard()
    )


@router.message(F.text == "üé¨ –í–Ω–µ—É—á–µ–±–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
async def students(msg: Message):
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=keyboard.get_projects_keyboard())


@router.message(F.text == "–ù–∞–π—Ç–∏ üë©üèº‚Äçüíª")
async def students(msg: Message):
    await msg.answer(
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞, —É–∫–∞–∑–∞–≤ –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ, –∞ —Ç–∞–∫–∂–µ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ–π –±–∞–∑—ã. "
        "–ö–∞—Ä—Ç–æ—á–∫—É –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —Å–∫—Ä—ã—Ç—å –∏–∑ –≤–∏–¥–∏–º–æ—Å—Ç–∏.",
        reply_markup=keyboard.get_search_keyboard()
    )
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=keyboard.get_direction_keyboard())


@router.callback_query(lambda c: c.data.startswith("dir."))
async def handle_direction_callback(callback_query: CallbackQuery):
    direction = callback_query.data.split(".")[1]
    async with async_session_factory() as session:
        result = await session.execute(
            select(User).filter(User.visibility == True)
        )
        users = result.scalars().all()

    if users:
        filtered_users = [user for user in users if user.direction == direction]

        if filtered_users:
            users_info = "\n\n".join([
                f"Username: <a href='https://t.me/{user.username}'>{user.username}</a>\n"
                f"–û —Å–µ–±–µ: {user.about or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"GitHub: {user.github or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"LinkedIn: {user.linkedin or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
                for user in filtered_users
            ])
            await callback_query.message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º {direction}:\n\n{users_info}")
        else:
            await callback_query.message.answer(f"–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º {direction}.")
    else:
        await callback_query.message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∏–¥–∏–º–æ—Å—Ç—å—é.")


def get_profile_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="edit_direction")],
            [InlineKeyboardButton(text="–û —Å–µ–±–µ", callback_data="edit_about")],
            [InlineKeyboardButton(text="GitHub", callback_data="edit_github")],
            [InlineKeyboardButton(text="LinkedIn", callback_data="edit_linkedin")],
            [InlineKeyboardButton(text="–í–∏–¥–∏–º–æ—Å—Ç—å", callback_data="edit_visibility")],
        ]
    )


async def get_user_info(session, telegram_id: int) -> str | None:
    user = await crud.get_user(session, telegram_id)
    if not user:
        return None

    user_info = (
        f"username: {user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user.direction or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–û —Å–µ–±–µ: {user.about or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"GitHub: {user.github or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"LinkedIn: {user.linkedin or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–í–∏–¥–∏–º–æ—Å—Ç—å: {'–≤–∏–¥–µ–Ω' if user.visibility else '–Ω–µ –≤–∏–¥–µ–Ω'}\n\n"
    )
    return user_info


@router.message(F.text == "ü™™ –ü—Ä–æ—Ñ–∏–ª—å")
async def settings(message: types.Message):
    telegram_id = message.from_user.id

    async with async_session_factory() as session:
        user_info = await get_user_info(session, telegram_id)
        if not user_info:
            await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        await message.answer(user_info, reply_markup=get_profile_keyboard())


@router.callback_query(lambda c: c.data == "edit_visibility")
async def change_visibility(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    try:
        async with async_session_factory() as session:
            user = await crud.get_user(session, user_id)
            if not user:
                await callback_query.message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            new_visibility = not user.visibility
            await crud.update_visibility(user_id, new_visibility, session)

            user_info = await get_user_info(session, user_id)
            if not user_info:
                await callback_query.message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            await callback_query.message.edit_text(
                f"{user_info}",
                reply_markup=get_profile_keyboard()
            )
    except Exception as e:
        await callback_query.message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


def get_direction_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=direction.capitalize(), callback_data=f"set_direction_{direction}")]
            for direction in keyboard.DIRECTIONS
        ]
    )


@router.callback_query(lambda c: c.data == "edit_direction")
async def choose_direction(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=get_direction_keyboard())


@router.callback_query(lambda c: c.data.startswith("set_direction_"))
async def set_direction(callback_query: types.CallbackQuery):
    direction = callback_query.data.split("_")[-1]
    user_id = callback_query.from_user.id

    if direction not in keyboard.DIRECTIONS:
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.", show_alert=True)
        return

    async for session in get_db():
        success = await crud.update_user_profile(user_id, "direction", direction, session)

        if success:
            await callback_query.answer(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ '{direction}'.")
        else:
            await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


    user_info = await get_user_info(session, user_id)
    if not user_info:
        await callback_query.message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    await callback_query.message.edit_text(
    f"{user_info}",
            reply_markup=get_profile_keyboard()
    )


class EditProfile(StatesGroup):
    edit_about = State()
    edit_github = State()
    edit_linkedin = State()

VALID_FIELDS = {"about", "github", "linkedin"}

@router.callback_query(lambda c: c.data.startswith("edit_"))
async def edit_profile_field(callback_query: types.CallbackQuery, state: FSMContext):
    field = callback_query.data[5:]

    if field not in VALID_FIELDS:
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", show_alert=True)
        return

    await state.set_state(f'EditProfile:edit_{field}')
    await callback_query.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è: {field}")


@router.message(StateFilter("EditProfile:edit_about", "EditProfile:edit_github", "EditProfile:edit_linkedin"))
async def handle_new_value(msg: types.Message, state: FSMContext):
    state_name = await state.get_state()
    print(f"Current state: {state_name}")

    if state_name and state_name.startswith("EditProfile:edit_"):
        field_name = state_name.split(":")[1][5:]
        new_value = msg.text
        print(f"Updating field: {field_name} with value: {new_value}")

        async with async_session_factory() as session:
            user_id = msg.from_user.id

            success = await crud.update_user_profile(user_id, field_name, new_value, session)
            print(f"Update success: {success}")

            if success:
                user_info = await get_user_info(session, user_id)
                if not user_info:
                    await msg.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    return

                await msg.answer(
                    f"{user_info}",
                    reply_markup=get_profile_keyboard()
                )
                await state.clear()
            else:
                await msg.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ '{field_name}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        await msg.answer("–û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")


@router.message()
async def handle_unknown_query(message: Message, bot: Bot):
    text = message.text.lower()

    for trigger, response in TRIGGER_RESPONSES.items():
        if trigger in text:
            await message.answer(
                response,
                parse_mode="HTML",
            )
            return

    user = message.from_user
    user_id = user.id
    username = user.username if user.username else f"ID: {user_id}"
    question = message.text

    try:
        await bot.send_message(
            chat_id=1741279318,
            text=f"üì© –í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}: {question}",
            parse_mode="HTML"
        )
        await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –°–ø–∞—Å–∏–±–æ!")
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


